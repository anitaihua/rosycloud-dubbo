<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

    <context:property-placeholder location="classpath*:*.properties" />

    <!-- 当前应用名称（是注册中心识别的名称） -->
    <dubbo:application name="rosycloud-web"/>
    <!-- 注册中心地址(zookeeper) -->
    <dubbo:registry address="zookeeper://${registry.ip}:${registry.port}"/>
    <!-- 配置包扫描（同样不需要SpringMVC的包扫描） -->
    <dubbo:annotation package="cn.rosycloud.controller"/>

    <dubbo:reference interface="cn.rosycloud.service.SystemService" id="systemServiceImpl"  check="false"/>
    <dubbo:reference interface="cn.rosycloud.service.LogService" id="logServiceImpl" check="false" />


    <dubbo:reference interface="cn.rosycloud.service.ArticleService" id="articleServiceImpl" check="false" />
    <dubbo:reference interface="cn.rosycloud.service.ArticleUserLikeService" id="articleUserLikeServiceServiceImpl" check="false" />
    <dubbo:reference interface="cn.rosycloud.service.CommentService" id="commentServiceImpl" check="false" />
    <dubbo:reference interface="cn.rosycloud.service.SetArtitleLabelService" id="setArtitleLabelServiceImpl" check="false" />
    <dubbo:reference interface="cn.rosycloud.service.SetArtitleSortService" id="setArtitleSortServiceImpl" check="false" />
    <dubbo:reference interface="cn.rosycloud.service.CommentGoodService" id="commentGoodServiceImpl" check="false" />
    <dubbo:reference interface="cn.rosycloud.service.ConcernService" id="concernServiceImpl" check="false" />
    <dubbo:reference interface="cn.rosycloud.service.LabelService" id="labelServiceImpl" check="false" />
    <dubbo:reference interface="cn.rosycloud.service.SetArticleContentService" id="setArticleContentServiceImpl" check="false" />
    <dubbo:reference interface="cn.rosycloud.service.SortService" id="sortServiceImpl" check="false" />
    <dubbo:reference interface="cn.rosycloud.service.TypeService" id="typeServiceServiceImpl" check="false" />
    <dubbo:reference interface="cn.rosycloud.service.UserService" id="userServiceServiceImpl" check="false" />






    <!--<mvc:default-servlet-handler/>-->

    <mvc:resources location="/js/" mapping="/js/**"/>
    <mvc:resources location="/views/" mapping="/views/**.html"/>

    <!-- 指定自己定义的validator -->
    <mvc:annotation-driven validator="validator"/>

    <!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
    <!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename" value="messages"/>
        <property name="useCodeAsDefaultMessage" value="false"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>

    <!-- SpringMVC的基本控制器 -->
    <context:component-scan base-package="cn.rosycloud">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>
    <mvc:annotation-driven>
        <mvc:argument-resolvers>
            <!--配置注入登录用户的解析器-->
            <bean id="currentUserMethodArgumentResolver" class="cn.rosycloud.authorization.rosolvers.CurrentUserMethodArgumentResolver"/>
        </mvc:argument-resolvers>
        <mvc:message-converters register-defaults="true">
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes" value="application/json"/>
                <property name="features">
                    <array>
                        <value>WriteMapNullValue</value>

                        <value>WriteDateUseDateFormat</value>
                        <!-- 将Collection类型字段的字段空值输出为[] -->
                        <value>WriteNullListAsEmpty</value>
                        <!-- 将字符串类型字段的空值输出为空字符串 "" -->
                        <value>WriteNullStringAsEmpty</value>
                        <!-- 将Boolean类型字段的空值输出为false -->
                        <value>WriteNullBooleanAsFalse</value>

                        <value>WriteNullNumberAsZero</value>
                    </array>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>


    <mvc:view-controller path="/" view-name="index"/>

    <!-- 启用 @AspectJ -->
    <aop:aspectj-autoproxy />

    <bean id="tokenManager" class="cn.rosycloud.authorization.manager.impl.DefaultTokenManager" />


    <!--通过线程池的方式整合单台redis  -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--定义连接的总数  -->
        <property name="maxTotal" value="${redis.maxTotal}"/>

        <!--定义最大的空闲数量  -->
        <property name="maxIdle" value="${redis.maxIdle}"/>

        <!--定义最小空闲数量  -->
        <property name="minIdle" value="${redis.minIdle}"></property>
    </bean>


    <!--通过工厂模式创建jedis连接
     -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="password" value="${redis.password}"/>

        <!--引入线程池的配置  -->
        <property name="poolConfig" ref="poolConfig"/>
    </bean>



    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory"   ref="jedisConnectionFactory" />
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>

    </bean>


    <!-- 配置springmvc的视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/views/"/>
        <property name="suffix" value=".html"/>
    </bean>
</beans>